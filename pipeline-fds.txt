// Example AST
head: A
	args: ...
	redirs: ...
	next: B
		args: ...
		redirs: ...
		next: C
			args: ...
			redirs: ...
			next: D
				args: ...
				redirs: ...
				next: E
					args: ...
					redirs: ...
					next: NULL

// Example syscalls
pipe AB
child A (stdin, AB[1])
	close AB[0]								close next read end
	(dup2,close)							in==stdin, no previous read end to move
	dup2 AB[1] -> stdout, close AB[1]		move next write end to stdout
(close)										in==stdin, no previous read end to close
close AB[1]									close next write end
pipe BC
child B (AB[0], BC[1])
	close BC[0]								close next read end
	dup2 AB[0] -> stdin, close AB[0]		move previous read end to stdin
	dup2 BC[1] -> stdout, close BC[1]		move next write end to stdout
close AB[0]									close previous read end
close BC[1]									close next write end
pipe CD
child C (BC[0], CD[1])
	close CD[0]								close next read end
	dup2 BC[0] -> stdin, close BC[0]		move previous read end to stdin
	dup2 CD[1] -> stdout, close CD[1]		move next write end to stdout
close BC[0]									close previous read end
close CD[1]									close next write end
pipe DE
child D (CD[0], DE[1])
	close DE[0]								close next read end
	dup2 CD[0] -> stdin, close CD[0]		move previous read end to stdin
	dup2 DE[1] -> stdout, close CD[1]		move next write end to stdout
close CD[0]									close previous read end
close DE[1]									close next write end
(pipe)										no next command, no need to create pipe
child E (DE[0], stdout)
	(close)									out==stdout, no next read end to close
	dup2 DE[0] -> stdin, close DE[0]		move previous read end to stdin
	(dup2,close)							out==stdout, no next write end to move
close DE[0]									close previous read end
(close)										out==stdout, no next write end to close

// Repeated block
pipe NEXT
child COMMAND (PREV[0], NEXT[1])
	close NEXT[0]								close next read end
	dup2 PREV[0] -> stdin, close PREV[0]		move previous read end to stdin
	dup2 NEXT[1] -> stdout, close NEXT[1]		move next write end to stdout
close PREV[0]									close previous read end
close NEXT[1]									close next write end
PREV[0] := NEXT[0]								current "next read end" is next command's "previous read end"

// "previous write end" doesn't exist because it is always closed at end of previous step
pipe NEXT
child COMMAND (in_fd, NEXT[1])
	close NEXT[0]								close next read end
	dup2 in_fd -> stdin, close in_fd			move input fd to stdin
	dup2 NEXT[1] -> stdout, close NEXT[1]		move next write end to stdout
close in_fd										close this command's input fd
close NEXT[1]									close next write end
in_fd := NEXT[0]								current "next read end" is next command's input fd

// Single command
in_fd := stdin
(pipe)											no next command, no need to create pipe
> NEXT[1] := stdout								use stdout for output instead
child COMMAND (in_fd, NEXT[1])
	(close NEXT[0])								NEXT[1]==stdout, no next read end to close
	(dup2,close in_fd)							in_fd==stdin, no input fd to move
	(dup2,close NEXT[1])						NEXT[1]==stdout, no next write end to move
(close in_fd)									in_fd==stdin, no input fd to close
(close NEXT[1])									NEXT[1]==stdout, no next write end to close
